import re
import asyncio
import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.enums import ChatType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db_connection import insert_user, can_post_more, mark_user_allowed, update_invite_count, save_job, get_user_jobs, delete_job_by_id
from config import ADMINS, ADMIN_USERNAME, CHANNEL_ID

router = Router()
logger = logging.getLogger(__name__)

class Form(StatesGroup):
    job = State()

TEMPLATE = {
    "address": r"^üìç\s*–ê–¥—Ä–µ—Å:\s*(.+)$",
    "title":   r"^üìù\s*–ó–∞–¥–∞—á–∞:\s*(.+)$",
    "payment": r"^üíµ\s*–û–ø–ª–∞—Ç–∞:\s*(.+)$",
    "contact": r"^‚òéÔ∏è\s*–ö–æ–Ω—Ç–∞–∫—Ç:\s*(.+)$",
    "extra":   r"^üìå\s*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:\s*(.*)$",
}

@router.message(CommandStart(), F.chat.type == ChatType.PRIVATE)
async def start(msg: Message):
    insert_user(msg.from_user.id, msg.from_user.username or "")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâÔ∏è –í—ã–ª–æ–∂–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="create")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="myjobs")],
    ])
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb)

@router.callback_query(F.data == "create")
async def prompt_job(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
        "üìÑ –í–≤–µ–¥–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ —à–∞–±–ª–æ–Ω—É:\n\n"
        "üìç –ê–¥—Ä–µ—Å: –ë–∏—à–∫–µ–∫\n"
        "üìù –ó–∞–¥–∞—á–∞: –ö—É—Ä—å–µ—Ä\n"
        "üíµ –û–ø–ª–∞—Ç–∞: 1000 —Å–æ–º\n"
        "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç: +996501234567\n"
        "üìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ..."
    )
    await state.set_state(Form.job)

@router.message(Form.job)
async def handle_job(msg: Message, state: FSMContext, bot: Bot):
    user_id = msg.from_user.id
    text = msg.text.strip()
    data = {}
    for line in text.splitlines():
        for key, pattern in TEMPLATE.items():
            m = re.match(pattern, line.strip())
            if m:
                data[key] = m.group(1).strip()
    if not all(k in data for k in ("address", "title", "payment", "contact")):
        return await msg.reply("‚ùå –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ —à–∞–±–ª–æ–Ω—É.")

    if not can_post_more(user_id):
        await msg.answer(
            "üîí –í—ã —É–∂–µ –≤—ã–ª–æ–∂–∏–ª–∏ 1 –≤–∞–∫–∞–Ω—Å–∏—é. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:\n\n"
            "üí∞ –û–ø–ª–∞—Ç–∏—Ç–µ 100 —Å–æ–º –∞–¥–º–∏–Ω—É <b> –∏–ª–∏<b/>\n"
            "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π –≤ –≥—Ä—É–ø–ø—É.\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–∞—Ç—å –≤–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url=f"https://t.me/{ADMIN_USERNAME}")]
            ])
        )
        await state.clear()
        return

    job_text = (
        f"<b>–í–∞–∫–∞–Ω—Å–∏—è: {data['title']}</b>\n"
        f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
        f"üíµ –û–ø–ª–∞—Ç–∞: {data['payment']}\n"
        f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
    )
    if data.get("extra"):
        job_text += f"\nüìå {data['extra']}"

    msg_sent = await bot.send_message(CHANNEL_ID, job_text)
    save_job(user_id=user_id, message_id=msg_sent.message_id, all_info=data)
    # print(f"[DEBUG] –°–æ—Ö—Ä–∞–Ω—è—é –≤ –ë–î: {user_id=}, {msg_sent.message_id=}, {data=}")

    update_invite_count(user_id)
    await msg.answer("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
    await state.clear()

@router.callback_query(F.data == "myjobs")
async def list_jobs(call: CallbackQuery):
    user_id = call.from_user.id
    jobs = await asyncio.get_running_loop().run_in_executor(None, get_user_jobs, user_id)
    if not jobs:
        return await call.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
    for job in jobs:
        info = job.all_info
        text = (
            f"<b>–í–∞–∫–∞–Ω—Å–∏—è #{job.id}</b>\n"
            f"üìç –ê–¥—Ä–µ—Å: {info.get('address', '‚Äî')}\n"
            f"üìù –ó–∞–¥–∞—á–∞: {info.get('title', '‚Äî')}\n"
            f"üíµ –û–ø–ª–∞—Ç–∞: {info.get('payment', '‚Äî')}\n"
            f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç: {info.get('contact', '‚Äî')}"
        )
        if info.get("extra"):
            text += f"\nüìå {info['extra']}"
        await call.message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{job.id}")]
            ]),
            parse_mode="HTML"
        )

@router.callback_query(lambda c: c.data.startswith("del:"))
async def delete_job(call: CallbackQuery, bot: Bot):
    job_id = int(call.data.split(":")[1])
    job = await asyncio.get_running_loop().run_in_executor(None, delete_job_by_id, job_id)
    if job:
        try:
            await bot.delete_message(CHANNEL_ID, job.message_id)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
        await call.message.answer(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è #{job_id} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await call.message.answer("‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")

@router.message(Command("allow_posting"), F.chat.type == ChatType.PRIVATE)
async def allow_posting(msg: Message):
    if msg.from_user.id not in ADMINS:
        return await msg.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    args = msg.text.split()
    if len(args) != 2:
        return await msg.reply("–§–æ—Ä–º–∞—Ç: /allow_posting ID")
    try:
        uid = int(args[1])
        mark_user_allowed(uid)
        await msg.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.")
    except:
        await msg.reply("‚ùå –û—à–∏–±–∫–∞ ID")

@router.message(F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]))
async def restrict_group_msgs(msg: Message):
    if msg.from_user.id not in ADMINS:
        await msg.delete()
