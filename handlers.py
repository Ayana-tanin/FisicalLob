import re
import asyncio
import logging
import signal
import sys

from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, \
    KeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.enums import ChatType, ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from sqlalchemy import func

from db_connection import *
from config import CHANNEL_ID, CHANNEL_URL, ADMINS, ADMIN_USERNAME

logger = logging.getLogger(__name__)
router = Router()


class VacancyForm(StatesGroup):
    all_info = State()


# –®–∞–±–ª–æ–Ω—ã –ø–æ–ª–µ–π –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
TEMPLATE = {
    "address": r"^üìç\s*–ê–¥—Ä–µ—Å:\s*(.+)$",
    "title": r"^üìù\s*–ó–∞–¥–∞—á–∞:\s*(.+)$",
    "payment": r"^üíµ\s*–û–ø–ª–∞—Ç–∞:\s*(.+)$",
    "contact": r"^‚òéÔ∏è\s*–ö–æ–Ω—Ç–∞–∫—Ç:\s*(.+)$",
    "extra": r"^üìå\s*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:\s*(.*)$",
}
PHONE_RE = re.compile(r"^\+?\d[\d\s\-]{7,}\d$")

kb_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úâÔ∏è –í—ã–ª–æ–∂–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")],
        [KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å")],
        [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")],
        [KeyboardButton(text="üìã –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
)


@router.message(CommandStart(), F.chat.type == ChatType.PRIVATE)
async def cmd_start(msg: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é"""
    try:
        insert_user(msg.from_user.id, msg.from_user.username or "")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    await msg.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π.\n\n"
        "üéÅ –ü–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
        "üìù –î–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∏—Ç—å 100 —Å–æ–º\n"
        "‚Ä¢ –ò–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å 5 –¥—Ä—É–∑–µ–π –≤ –≥—Ä—É–ø–ø—É",
        reply_markup=kb_menu
    )


@router.message(F.text == "‚úâÔ∏è –í—ã–ª–æ–∂–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
async def prepare_vacancy_button(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    await prepare_vacancy_impl(msg, state)


@router.callback_query(F.data == "create")
async def prepare_vacancy(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    await call.answer()
    await prepare_vacancy_impl(call.message, state)


async def prepare_vacancy_impl(msg: Message, state: FSMContext):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    user_id = msg.from_user.id if hasattr(msg, 'from_user') else msg.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    can_post, message, invites_count = can_post_more_extended(user_id)

    if not can_post:
        if user_id not in ADMINS:
            await msg.answer(
                f"üîí {message}\n"
                f"üë• –í—ã –¥–æ–±–∞–≤–∏–ª–∏: {invites_count}/5 –¥—Ä—É–∑–µ–π\n\n"
                f"üí∞ –û–ø–ª–∞—Ç–∏—Ç—å: https://t.me/{ADMIN_USERNAME}\n"
                f"üë• –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ—â—ë {5 - invites_count} –¥—Ä—É–∑–µ–π –≤ –≥—Ä—É–ø–ø—É",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üë§ –ê–¥–º–∏–Ω", url=f"https://t.me/{ADMIN_USERNAME}")],
                    [InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø–∞", url=CHANNEL_URL)]
                ])
            )
            return

    await msg.answer(
        "üìÑ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ —à–∞–±–ª–æ–Ω—É, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π:\n\n"
        "üìç –ê–¥—Ä–µ—Å: \n"
        "üìù –ó–∞–¥–∞—á–∞: \n"
        "üíµ –û–ø–ª–∞—Ç–∞: \n"
        "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç: \n"
        "üìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n"
        "‚ö†Ô∏è –°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç!",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(VacancyForm.all_info)


@router.message(F.text == "üìã –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
async def my_vacancies(msg: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with SessionLocal() as session:
            jobs = session.query(Job).filter_by(user_id=msg.from_user.id).order_by(Job.created_at.desc()).all()
            
            if not jobs:
                await msg.answer(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.",
                    reply_markup=kb_menu
                )
                return
            
            for job in jobs:
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_job_{job.id}"),
                        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_job_{job.id}")
                    ]
                ])
                
                job_text = (
                    f"<b>üî• {job.all_info['title']}</b>\n\n"
                    f"üìç <b>–ê–¥—Ä–µ—Å:</b> {job.all_info['address']}\n"
                    f"üíµ <b>–û–ø–ª–∞—Ç–∞:</b> {job.all_info['payment']}\n"
                    f"‚òéÔ∏è <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {job.all_info['contact']}"
                )
                
                if job.all_info.get('extra'):
                    job_text += f"\nüìå <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {job.all_info['extra']}"
                
                job_text += f"\n\nüìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {job.created_at.strftime('%d.%m.%Y %H:%M')}"
                
                await msg.answer(
                    job_text,
                    reply_markup=kb,
                    parse_mode=ParseMode.HTML
                )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π.")


@router.callback_query(F.data.startswith("edit_job_"))
async def edit_job_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    try:
        job_id = int(callback.data.split("_")[2])
        
        with SessionLocal() as session:
            job = session.query(Job).filter_by(id=job_id, user_id=callback.from_user.id).first()
            if not job:
                await callback.answer("‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(editing_job_id=job_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
            current_text = (
                "üìÑ –¢–µ–∫—É—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è:\n\n"
                f"üìç –ê–¥—Ä–µ—Å: {job.all_info['address']}\n"
                f"üìù –ó–∞–¥–∞—á–∞: {job.all_info['title']}\n"
                f"üíµ –û–ø–ª–∞—Ç–∞: {job.all_info['payment']}\n"
                f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç: {job.all_info['contact']}"
            )
            if job.all_info.get('extra'):
                current_text += f"\nüìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {job.all_info['extra']}"
            
            current_text += "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ:"
            
            await callback.message.edit_text(
                current_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_{job_id}")]
                ])
            )
            
            await state.set_state(VacancyForm.all_info)
            await callback.answer()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")


@router.callback_query(F.data.startswith("delete_job_"))
async def delete_job_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    try:
        job_id = int(callback.data.split("_")[2])
        
        with SessionLocal() as session:
            job = session.query(Job).filter_by(id=job_id, user_id=callback.from_user.id).first()
            if not job:
                await callback.answer("‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
            try:
                await callback.bot.delete_message(
                    chat_id=CHANNEL_ID,
                    message_id=job.message_id
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
            session.delete(job)
            session.commit()
            
            await callback.message.edit_text(
                "‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
                reply_markup=None
            )
            await callback.answer("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É–¥–∞–ª–µ–Ω–∞")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")


@router.callback_query(F.data.startswith("cancel_edit_"))
async def cancel_edit_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    try:
        await state.clear()
        await callback.message.edit_text(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=None
        )
        await callback.answer()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å")
async def payment_button(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    await msg.answer(
        "üí∞ –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º:\n\n"
        "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 100 —Å–æ–º\n"
        "‚è∞ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–¥–Ω–æ–π –≤–∞–∫–Ω—Å–∏–∏",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url=f"https://t.me/{ADMIN_USERNAME}")]
        ])
    )


@router.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")
async def contact_admin_button(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º"""
    await msg.answer(
        "üë§ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url=f"https://t.me/AkylaiMamyt")]
        ])
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
@router.message(VacancyForm.all_info)
async def process_vacancy(msg: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –≤–∞–∫–∞–Ω—Å–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        state_data = await state.get_data()
        editing_job_id = state_data.get('editing_job_id')
        
        uid = msg.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        with SessionLocal() as session:
            user = session.query(User).filter_by(telegram_id=uid).first()
            if not user:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                try:
                    insert_user(uid, msg.from_user.username or "")
                    user = session.query(User).filter_by(telegram_id=uid).first()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω–∞–º
                    for admin_id in ADMINS:
                        try:
                            await bot.send_message(
                                admin_id,
                                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                                f"User ID: {uid}\n"
                                f"Username: {msg.from_user.username}\n"
                                f"Error: {str(e)}"
                            )
                        except Exception as admin_e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {admin_e}")
                    
                    await msg.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        reply_markup=kb_menu
                    )
                    await state.clear()
                    return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π)
        if not editing_job_id:
            with SessionLocal() as session:
                last_job = session.query(Job).filter(
                    Job.user_id == uid,
                    Job.created_at >= datetime.now() - timedelta(minutes=5)
                ).first()
                
                if last_job and (datetime.now() - last_job.created_at).total_seconds() < 300:
                    await msg.answer(
                        "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏.",
                        reply_markup=kb_menu
                    )
                    await state.clear()
                    return

        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        data = {}
        lines = msg.text.strip().splitlines()

        for line in lines:
            line = line.strip()
            if not line:
                continue

            for key, pat in TEMPLATE.items():
                m = re.match(pat, line)
                if m:
                    data[key] = m.group(1).strip()
                    break

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["address", "title", "payment", "contact"]
        missing_fields = []

        for field in required_fields:
            if field not in data or not data[field]:
                missing_fields.append(field)

        if missing_fields:
            field_names = {
                "address": "üìç –ê–¥—Ä–µ—Å",
                "title": "üìù –ó–∞–¥–∞—á–∞",
                "payment": "üíµ –û–ø–ª–∞—Ç–∞",
                "contact": "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç"
            }
            missing_names = [field_names[f] for f in missing_fields]
            await msg.reply(
                f"‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—è: {', '.join(missing_names)}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ –ø–æ —à–∞–±–ª–æ–Ω—É:"
            )
            await prepare_vacancy_impl(msg, state)
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not PHONE_RE.match(data['contact']):
            await msg.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +996XXXXXXXXX\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ:"
            )
            await prepare_vacancy_impl(msg, state)
            return

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        can_post, message, invites_count = can_post_more_extended(uid)
        if not can_post and uid not in ADMINS:
            await msg.answer(
                f"üîí {message}\n"
                f"üë• –í—ã –¥–æ–±–∞–≤–∏–ª–∏: {invites_count}/5 –¥—Ä—É–∑–µ–π\n\n"
                f"üí∞ –û–ø–ª–∞—Ç–∏—Ç—å: https://t.me/{ADMIN_USERNAME}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üë§ –ê–¥–º–∏–Ω", url=f"https://t.me/{ADMIN_USERNAME}")]
                ])
            )
            await state.clear()
            return

        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if editing_job_id:
            with SessionLocal() as session:
                job = session.query(Job).filter_by(id=editing_job_id, user_id=msg.from_user.id).first()
                if not job:
                    await msg.answer("‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    await state.clear()
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                job.all_info = data
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
                vacancy_text = (
                    f"<b>–í–∞–∫–∞–Ω—Å–∏—è {data['title']}</b>\n\n"
                    f"üìç <b>–ê–¥—Ä–µ—Å:</b> {data['address']}\n"
                    f"üíµ <b>–û–ø–ª–∞—Ç–∞:</b> {data['payment']}\n"
                    f"‚òéÔ∏è <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {data['contact']}"
                )
                
                if data.get('extra'):
                    vacancy_text += f"\nüìå <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {data['extra']}"
                
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    await bot.edit_message_text(
                        chat_id=CHANNEL_ID,
                        message_id=job.message_id,
                        text=vacancy_text,
                        parse_mode=ParseMode.HTML
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª–∏–∫–∞
                    response_button = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(
                            text="üì® –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è",
                            url=f"https://t.me/{msg.from_user.username}" if msg.from_user.username
                            else f"tg://user?id={msg.from_user.id}"
                        )]
                    ])
                    
                    await bot.edit_message_reply_markup(
                        chat_id=CHANNEL_ID,
                        message_id=job.message_id,
                        reply_markup=response_button
                    )
                    
                    session.commit()
                    await msg.answer(
                        "‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                        reply_markup=kb_menu
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ: {e}")
                    await msg.answer(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –≤ –∫–∞–Ω–∞–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=kb_menu
                    )
        else:
            try:
                # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
                vacancy_text = (
                    f"<b>–í–∞–∫–∞–Ω—Å–∏—è {data['title']}</b>\n\n"
                    f"üìç <b>–ê–¥—Ä–µ—Å:</b> {data['address']}\n"
                    f"üíµ <b>–û–ø–ª–∞—Ç–∞:</b> {data['payment']}\n"
                    f"‚òéÔ∏è <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {data['contact']}"
                )

                if data.get('extra'):
                    vacancy_text += f"\nüìå <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {data['extra']}"

                posted = await bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=vacancy_text,
                    parse_mode=ParseMode.HTML
                )

                # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–∏–∫–∞
                response_button = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üì® –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è",
                        url=f"https://t.me/{msg.from_user.username}" if msg.from_user.username
                        else f"tg://user?id={msg.from_user.id}"
                    )]
                ])

                await bot.edit_message_reply_markup(
                    chat_id=CHANNEL_ID,
                    message_id=posted.message_id,
                    reply_markup=response_button
                )

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
                try:
                    saved = await asyncio.to_thread(save_job_db, uid, posted.message_id, data)
                    if not saved:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                except Exception as e:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω–∞–º
                    for admin_id in ADMINS:
                        try:
                            await bot.send_message(
                                admin_id,
                                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:\n"
                                f"User ID: {uid}\n"
                                f"Message ID: {posted.message_id}\n"
                                f"Error: {str(e)}\n"
                                f"Data: {data}"
                            )
                        except Exception as admin_e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {admin_e}")
                    
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É
                    try:
                        await bot.delete_message(chat_id=CHANNEL_ID, message_id=posted.message_id)
                    except Exception as delete_e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: {delete_e}")
                    
                    await msg.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        reply_markup=kb_menu
                    )
                    await state.clear()
                    return

                # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω, –Ω–µ can_post=True –∏ –Ω–µ –ø–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è)
                try:
                    with SessionLocal() as session:
                        user = session.query(User).filter_by(telegram_id=uid).first()
                        if user:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤–∞—è –ª–∏ —ç—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è
                            job_count = session.query(func.count(Job.id)).filter_by(user_id=uid).scalar()
                            
                            # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
                            # 1. –≠—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
                            # 2. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (can_post=False)
                            # 3. –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                            if job_count > 1 and not user.can_post and user.allowed_posts > 0:
                                user.allowed_posts -= 1
                                session.commit()
                                logger.info(f"–£–º–µ–Ω—å—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω–∞–º
                    for admin_id in ADMINS:
                        try:
                            await bot.send_message(
                                admin_id,
                                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:\n"
                                f"User ID: {uid}\n"
                                f"Error: {str(e)}"
                            )
                        except Exception as admin_e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {admin_e}")

                await msg.answer(
                    "‚úÖ –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!\n\n"
                    f"üìÑ –°—Å—ã–ª–∫–∞: {CHANNEL_URL}/{posted.message_id}\n"
                    "üìã –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏' \n –≠—Ç–æ –¥–∞—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é",
                    reply_markup=kb_menu
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω–∞–º
                for admin_id in ADMINS:
                    try:
                        await bot.send_message(
                            admin_id,
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:\n"
                            f"User ID: {uid}\n"
                            f"Error: {str(e)}\n"
                            f"Data: {data}"
                        )
                    except Exception as admin_e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {admin_e}")
                
                await msg.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=kb_menu
                )

        await state.clear()

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMINS:
            try:
                await bot.send_message(
                    admin_id,
                    f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n"
                    f"User ID: {msg.from_user.id}\n"
                    f"Error: {str(e)}"
                )
            except Exception as admin_e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {admin_e}")
        
        await msg.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=kb_menu
        )
        await state.clear()


def can_post_more_extended(user_id: int) -> tuple[bool, str, int]:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–º–æ–∂–µ—Ç_–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π)
    """
    try:
        with SessionLocal() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()

            if not user:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ
                return True, "–ü–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!", 0

            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è can_post = True - –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
            if user.can_post:
                return True, "–£ –≤–∞—Å –µ—Å—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é", user.invites

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            if user.can_post_until and user.can_post_until > datetime.now():
                return True, f"–£ –≤–∞—Å –µ—Å—Ç—å –º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {user.can_post_until.strftime('%d.%m.%Y %H:%M')}", user.invites

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–æ–≤—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            if user.allowed_posts > 0:
                return True, f"–û—Å—Ç–∞–ª–æ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {user.allowed_posts}", user.invites

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            job_count = session.query(func.count(Job.id)).filter_by(user_id=user_id).scalar()
            if job_count == 0:
                return True, "–ü–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!", user.invites

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π (5+ –¥—Ä—É–∑–µ–π = 1 –ø—É–±–ª–∏–∫–∞—Ü–∏—è)
            if user.invites >= 5:
                # –î–∞–µ–º –æ–¥–Ω—É –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
                user.allowed_posts = 1
                user.invites = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                session.commit()
                return True, "–ü–æ–ª—É—á–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π!", 0

            return False, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π.", user.invites

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ can_post_more_extended –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", 0


@router.message(Command("allow_posting"))
async def allow_posting_handler(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        parts = message.text.strip().split()
        if len(parts) < 2:
            await message.answer(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "/allow_posting @username - –æ–¥–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n"
                "/allow_posting month @username - –º–µ—Å—è—Ü –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
                "/allow_posting permanent @username - –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"
            )
            return

        is_month = (len(parts) == 3 and parts[1].lower() == "month")
        is_permanent = (len(parts) == 3 and parts[1].lower() == "permanent")
        username_or_id = parts[2] if (is_month or is_permanent) else parts[1]

        with SessionLocal() as session:
            user = None

            if username_or_id.startswith("@"):
                user = session.query(User).filter_by(username=username_or_id[1:]).first()
            elif username_or_id.isdigit():
                user = session.query(User).filter_by(telegram_id=int(username_or_id)).first()

            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            old_can_post = user.can_post
            old_can_post_until = user.can_post_until
            old_allowed_posts = user.allowed_posts

            try:
                if is_permanent:
                    # –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º can_post = True
                    user.can_post = True
                    user.can_post_until = None
                    user.allowed_posts = 0
                    msg = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username_or_id} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é."
                    logger.info(
                        f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–¥–∞–ª –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} "
                        f"(–±—ã–ª–æ: can_post={old_can_post}, can_post_until={old_can_post_until}, allowed_posts={old_allowed_posts})"
                    )
                elif is_month:
                    # –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º can_post
                    user.can_post = False
                    user.can_post_until = datetime.now() + timedelta(days=30)
                    user.allowed_posts = 0
                    msg = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username_or_id} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –º–µ—Å—è—Ü –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–æ {user.can_post_until.strftime('%d.%m.%Y %H:%M')}"
                    logger.info(
                        f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–¥–∞–ª –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} "
                        f"(–±—ã–ª–æ: can_post={old_can_post}, can_post_until={old_can_post_until}, allowed_posts={old_allowed_posts})"
                    )
                else:
                    # –†–∞–∑–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º can_post
                    user.can_post = False
                    user.can_post_until = None
                    user.allowed_posts += 1
                    msg = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username_or_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ 1 –ø—É–±–ª–∏–∫–∞—Ü–∏—è. –í—Å–µ–≥–æ: {user.allowed_posts}"
                    logger.info(
                        f"–ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} "
                        f"(–±—ã–ª–æ: can_post={old_can_post}, can_post_until={old_can_post_until}, allowed_posts={old_allowed_posts})"
                    )

                session.commit()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
                session.refresh(user)
                if is_permanent and not user.can_post:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")
                
                await message.answer(msg)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await message.bot.send_message(
                        user.telegram_id,
                        f"üéâ {msg}\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞."
                    )
                except Exception as notify_e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {notify_e}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")
                session.rollback()
                await message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
                )
                return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ allow_posting_handler: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )


@router.message(F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]))
async def handle_group_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    try:
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        if message.new_chat_members:
            for new_member in message.new_chat_members:
                if not new_member.is_bot and message.from_user:
                    try:
                        with SessionLocal() as session:
                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–≥–æ
                            inviter = session.query(User).filter_by(telegram_id=message.from_user.id).first()
                            if not inviter:
                                continue
                            
                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
                            inviter.invites += 1
                            
                            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ 5 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π, –¥–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                            if inviter.invites >= 5 and inviter.invites % 5 == 0:
                                inviter.allowed_posts += 1
                            
                            session.commit()
                            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–∏–≥–ª–∞—Å–∏–ª {new_member.id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {e}")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if message.left_chat_member:
            try:
                with SessionLocal() as session:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª —É—à–µ–¥—à–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    # (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—à–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
                    inviter = session.query(User).filter(
                        User.invites > 0  # –ë–µ—Ä–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                    ).order_by(User.invites.desc()).first()
                    
                    if inviter:
                        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
                        if inviter.invites > 0:
                            inviter.invites -= 1
                            
                            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ 5,
                            # –æ—Ç–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                            if inviter.invites < 5 and inviter.allowed_posts > 0:
                                inviter.allowed_posts -= 1
                            
                            session.commit()
                            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.left_chat_member.id} –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
        if message.from_user and message.from_user.id not in ADMINS:
            await message.delete()

            bot = message.bot
            bot_info = await bot.get_me()

            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é",
                    url=f"https://t.me/{bot_info.username}"
                )]
            ])

            warn = await message.answer(
                "<b>‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã!</b>\n\n"
                "üìù –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π –ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π!",
                reply_markup=kb,
                parse_mode=ParseMode.HTML
            )

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
            await asyncio.sleep(120)
            try:
                await warn.delete()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_group_messages: {e}")


@router.message(Command("stats"))
async def stats_handler(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if message.from_user.id not in ADMINS:
        return

    try:
        with SessionLocal() as session:
            total_users = session.query(func.count(User.id)).scalar()
            total_jobs = session.query(func.count(Job.id)).scalar()
            active_subscriptions = session.query(func.count(User.id)).filter(
                User.can_post_until > datetime.now()
            ).scalar()
            permanent_users = session.query(func.count(User.id)).filter(
                User.can_post == True
            ).scalar()

        await message.answer(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üìÑ –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {total_jobs}\n"
            f"üí≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subscriptions}\n"
            f"üîê –ü–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {permanent_users}",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stats_handler: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@router.message(Command("user_info"))
async def user_info_handler(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if message.from_user.id not in ADMINS:
        return

    try:
        parts = message.text.strip().split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /user_info @username –∏–ª–∏ /user_info user_id")
            return

        identifier = parts[1]

        with SessionLocal() as session:
            user = None

            if identifier.startswith("@"):
                user = session.query(User).filter_by(username=identifier[1:]).first()
            elif identifier.isdigit():
                user = session.query(User).filter_by(telegram_id=int(identifier)).first()

            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            job_count = session.query(func.count(Job.id)).filter_by(user_id=user.telegram_id).scalar()

            info_text = (
                f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
                f"üÜî ID: {user.telegram_id}\n"
                f"üìù Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìÑ –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {job_count}\n"
                f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {user.invites}\n"
                f"üé´ –†–∞–∑–æ–≤—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {user.allowed_posts}\n"
                f"üîê –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {'–î–∞' if user.can_post else '–ù–µ—Ç'}\n"
            )

            if user.can_post_until:
                info_text += f"‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {user.can_post_until.strftime('%d.%m.%Y %H:%M')}\n"

            await message.answer(info_text, parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_info_handler: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ
@router.message(F.chat.type == ChatType.PRIVATE)
async def unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å \n",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=kb_menu
    )


async def on_shutdown(bot: Bot):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logger.info("Shutting down...")
    await bot.session.close()

def handle_exit(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"Received exit signal {signum}")
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, handle_exit)
signal.signal(signal.SIGTERM, handle_exit)