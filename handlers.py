import re
import asyncio
import logging

from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.enums import ChatType, ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from db_connection import *
from config import CHANNEL_ID, CHANNEL_URL, ADMINS, ADMIN_USERNAME

logger = logging.getLogger(__name__)
router = Router()

class VacancyForm(StatesGroup):
    all_info = State()

# –®–∞–±–ª–æ–Ω—ã –ø–æ–ª–µ–π –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
TEMPLATE = {
    "address": r"^üìç\s*–ê–¥—Ä–µ—Å:\s*(.+)$",
    "title":   r"^üìù\s*–ó–∞–¥–∞—á–∞:\s*(.+)$",
    "payment": r"^üíµ\s*–û–ø–ª–∞—Ç–∞:\s*(.+)$",
    "contact": r"^‚òéÔ∏è\s*–ö–æ–Ω—Ç–∞–∫—Ç:\s*(.+)$",
    "extra":   r"^üìå\s*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:\s*(.*)$",
}
PHONE_RE = re.compile(r"^\+?\d[\d\s\-]{7,}\d$")
kb_menu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâÔ∏è –í—ã–ª–æ–∂–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="create")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="list")],
        [InlineKeyboardButton(text="üåê –ö–∞–Ω–∞–ª", url=CHANNEL_URL)]
    ])

@router.message(CommandStart(), F.chat.type == ChatType.PRIVATE)
async def cmd_start(msg: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é"""
    insert_user(msg.from_user.id, msg.from_user.username or "")
    await msg.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb_menu
    )

@router.callback_query(F.data == "create")
async def prepare_vacancy(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer(
        "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ —à–∞–±–ª–æ–Ω—É, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ :\n\n"
        "üìç –ê–¥—Ä–µ—Å: –ë–∏—à–∫–µ–∫, —É–ª. –õ–µ–Ω–∏–Ω–∞ 1\n"
        "üìù –ó–∞–¥–∞—á–∞: –ö—É—Ä—å–µ—Ä –Ω–∞ 2 —á–∞—Å–∞\n"
        "üíµ –û–ø–ª–∞—Ç–∞: 500 —Å–æ–º\n"
        "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç: +996501234567\n"
        "üìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(VacancyForm.all_info)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
@router.message(VacancyForm.all_info)
async def process_vacancy(msg: Message, state: FSMContext, bot: Bot):
    data = {}
    for line in msg.text.splitlines():
        for key, pat in TEMPLATE.items():
            m = re.match(pat, line.strip())
            if m:
                data[key] = m.group(1).strip()
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    for fld in ("address", "title", "payment", "contact"):
        if fld not in data:
            await msg.reply(f"‚ùå –ü–æ–ª–µ '{fld}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ —à–∞–±–ª–æ–Ω—É. –í —Ç–æ—á–Ω–æ—Å—Ç–∏, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            return

    uid = msg.from_user.id
    if not can_post_more(uid):
        if uid not in ADMINS:
            await msg.answer(
                "üîí –í—ã —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é. –ß—Ç–æ–±—ã –ø–æ—Å—Ç–∏—Ç—å –µ—â—ë, –æ–ø–ª–∞—Ç–∏—Ç–µ 100 —Å–æ–º –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ 5 –¥—Ä—É–∑–µ–π –≤ –≥—Ä—É–ø–ø—É.\n"
                f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º: https://t.me/{ADMIN_USERNAME}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üë§ –ê–¥–º–∏–Ω", url=f"https://t.me/{ADMIN_USERNAME}")]
                ])
            )
            await state.clear()
            return

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫–∞–Ω–∞–ª
    posted = await bot.send_message(
        chat_id=CHANNEL_ID,
        text=(f"<b>–í–∞–∫–∞–Ω—Å–∏—è: {data['title']}</b>\n"
              f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
              f"üíµ –û–ø–ª–∞—Ç–∞: {data['payment']}\n"
              f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
              + (f"\nüìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {data['extra']}" if data.get('extra') else "")),
        parse_mode=ParseMode.HTML
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –≤ –±–∞–∑—É
    saved = await asyncio.to_thread(save_job_db, uid, posted.message_id, data)
    if not saved:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑–µ.")
        return

    update_invite_count(uid)

    await msg.answer(
        "‚úÖ –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞. –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ '–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏'.",
        reply_markup=kb_menu
    )
    await state.clear()


#–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
@router.callback_query(F.data == "list")
async def list_vacancies(call: CallbackQuery):
    await call.answer()
    jobs = await asyncio.to_thread(get_user_jobs_db, call.from_user.id)
    if not jobs:
        await call.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.")
        return

    buttons = []
    for idx, job in enumerate(jobs):
        title = job.all_info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        snippet = title if len(title) <= 20 else title[:17] + "..."
        buttons.append([
            InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å: {snippet}", callback_data=f"del:{idx}")
        ])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.edit_text("–í–∞—à–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:", reply_markup=kb)

@router.callback_query(lambda c: c.data and c.data.startswith("del:"))
async def delete_vacancy_handler(call: CallbackQuery):
    await call.answer()
    idx = int(call.data.split(":")[1])
    user_id = call.from_user.id

    message_id, success = await asyncio.to_thread(delete_job_and_get_message, user_id, idx)
    if not success:
        await call.message.answer("‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–µ–Ω–∞.")
        return

    try:
        await call.bot.delete_message(chat_id=CHANNEL_ID, message_id=message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {e}")

    jobs = await asyncio.to_thread(get_user_jobs_db, user_id)
    if not jobs:
        await call.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.")
        return

    buttons = []
    for i, job in enumerate(jobs):
        title = job.all_info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        snippet = title if len(title) <= 20 else title[:17] + "..."
        buttons.append([
            InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å: {snippet}", callback_data=f"del:{i}")
        ])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.edit_text("–í–∞—à–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:", reply_markup=kb)

@router.message(Command("allow_posting"))
async def allow_posting_handler(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        await message.answer("‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /allow_posting @username –∏–ª–∏ /allow_posting user_id")
        return

    args = parts[1].strip()

    success, response_msg = allow_user_posting(args)
    await message.answer(response_msg)


@router.message(F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]))
async def block_non_admins(message: Message):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–æ–≤"""
    if message.from_user and message.from_user.id not in ADMINS:
        await message.delete()
        bot = message.bot
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é",
                url=f"https://t.me/{(await bot.get_me()).username}"
            )]
        ])
        warn = await message.answer(
            "<b>–°–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø—Ä–µ—â–µ–Ω—ã.</b>\n"
            "–ß—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é ‚Äî –ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É.",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        await asyncio.sleep(120)
        try:
            await warn.delete()
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
